{"version":3,"sources":["components/Form.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Form","nuevaCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","handleChange","event","target","name","value","className","onSubmit","preventDefault","trim","id","shortID","type","placeholder","onChange","protoType","PropTypes","func","isRequired","Cita","eliminarCita","onClick","protTypes","ProtTypes","object","App","citasGuardadas","JSON","parse","localStorage","getItem","citas","agregarCitas","useEffect","setItem","stringify","deleteCita","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iRAIMA,EAAO,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EAGGC,mBAAS,CACpCC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,KARc,mBAGrBC,EAHqB,KAGfC,EAHe,OAWKP,oBAAS,GAXd,mBAWrBQ,EAXqB,KAWdC,EAXc,KAatBC,EAAe,SAAAC,GACjBJ,EAAe,eACRD,EADO,eAETK,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,UAKlCb,EAAgDK,EAAhDL,QAASC,EAAuCI,EAAvCJ,YAAaC,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,KAAMC,EAAaC,EAAbD,SA2B3C,OACI,oCACI,0CAECG,EACG,uBAAGO,UAAU,gBAAb,qCACE,KACN,0BACIC,SAjCO,SAAAL,GACfA,EAAMM,iBAGiB,KAAnBhB,EAAQiB,QAAwC,KAAvBhB,EAAYgB,QAAkC,KAAjBf,EAAMe,QAAiC,KAAhBd,EAAKc,QAAqC,KAApBb,EAASa,QAMhHT,GAAgB,GAEhBH,EAAKa,GAAKC,MAEVrB,EAAUO,GAEVC,EAAe,CACXN,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,MAhBVI,GACI,KA6BA,iDACA,2BACIY,KAAK,OACLR,KAAK,UACLE,UAAU,eACVO,YAAY,iBACZC,SAAUb,EACVI,MAAOb,IAEX,kDACA,2BACIoB,KAAK,OACLR,KAAK,cACLE,UAAU,eACVO,YAAY,0BACZC,SAAUb,EACVI,MAAOZ,IAEX,wCACA,2BACImB,KAAK,OACLR,KAAK,QACLE,UAAU,eACVQ,SAAUb,EACVI,MAAOX,IAEX,uCACA,2BACIkB,KAAK,OACLR,KAAK,OACLE,UAAU,eACVQ,SAAUb,EACVI,MAAOV,IAEX,8CACA,8BACIW,UAAU,eACVF,KAAK,WACLS,YAAY,gBACZC,SAAUb,EACVI,MAAOT,IAEX,4BACIgB,KAAK,SACLN,UAAU,+BAFd,mBAYhBjB,EAAK0B,UAAY,CACbzB,UAAW0B,IAAUC,KAAKC,YAGf7B,QCrHT8B,EAAO,SAAC,GAAD,IAAEtB,EAAF,EAAEA,KAAMuB,EAAR,EAAQA,aAAR,OACT,yBAAKd,UAAU,QACX,wCAAa,8BAAOT,EAAKL,UACzB,wCAAU,8BAAOK,EAAKJ,cACtB,qCAAU,8BAAOI,EAAKH,QACtB,oCAAS,8BAAOG,EAAKF,OACrB,wCAAa,8BAAOE,EAAKD,WAEzB,4BACIU,UAAU,+BACVe,QAAU,kBAAMD,EAAavB,EAAKa,MAFtC,mBASRS,EAAKG,UAAY,CACbzB,KAAM0B,IAAUC,OAAON,WACvBE,aAAcG,IAAUN,KAAKC,YAGlBC,QC0CAM,MA/Df,WAGE,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UACjDJ,IACFA,EAAiB,IALN,MAQiBnC,mBAASmC,GAR1B,mBAQNK,EARM,KAQCC,EARD,KAUbC,qBAAU,WACLP,EACDG,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,IAE7CF,aAAaK,QAAQ,QAASP,KAAKQ,UAAU,OAE9C,CAACJ,EAAOC,IAEX,IAQMZ,EAAe,SAAAV,GACnB,IAAM0B,EAAaL,EAAMM,QAAO,SAAAxC,GAAI,OAAIA,EAAKa,KAAOA,KACpDsB,EAAaI,IAITE,EAA0B,IAAjBP,EAAMQ,OAAe,eAAiB,uBAErD,OACE,oCACE,0DAEA,yBAAKjC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEhB,UAxBM,SAAAO,GAChBmC,EAAa,GAAD,mBACPD,GADO,CAEVlC,SAwBI,yBAAKS,UAAU,mBACb,4BAAKgC,GACJP,EAAMS,KAAI,SAAA3C,GAAI,OACb,kBAAC,EAAD,CACE4C,IAAK5C,EAAKa,GACVb,KAAMA,EACNuB,aAAcA,YC3CVsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3D,GACL4D,QAAQ5D,MAAMA,EAAM6D,c","file":"static/js/main.2c99a53f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport shortID from 'shortid';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Form = ({ nuevaCita }) => {\r\n    //Crear State de citas\r\n\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    const handleChange = event => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    //Extraer valores\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita\r\n\r\n    const submitCita = event => {\r\n        event.preventDefault();\r\n\r\n        //Validar \r\n        if (mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\r\n            actualizarError(\r\n                true);\r\n            return;\r\n        }\r\n\r\n        actualizarError(false);\r\n        //Asignar ID\r\n        cita.id = shortID();\r\n        //Crear cita\r\n        nuevaCita(cita);\r\n        //Reiniciar el form\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Crear Cita</h2>\r\n\r\n            {error ?\r\n                <p className=\"alerta-error\">Todos los campos son obligatorios</p>\r\n                : null}\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={handleChange}\r\n                    value={mascota}\r\n                />\r\n                <label>Nombre Dueño</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Dueño Mascota\"\r\n                    onChange={handleChange}\r\n                    value={propietario}\r\n                />\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={fecha}\r\n                />\r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={hora}\r\n                />\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    placeholder=\"Observaviones\"\r\n                    onChange={handleChange}\r\n                    value={sintomas}\r\n                />\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >\r\n                    Agregar Cita\r\n               </button>\r\n            </form>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nForm.protoType = {\r\n    nuevaCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport ProtTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascotas: <span>{cita.mascota}</span></p>\r\n        <p>Dueño: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button \r\n            className=\"button eliminar u-full-width\"\r\n            onClick={ () => eliminarCita(cita.id)}\r\n            >\r\n            Eliminar &times;\r\n        </button>\r\n    </div>\r\n)\r\n\r\nCita.protTypes = {\r\n    cita: ProtTypes.object.isRequired,\r\n    eliminarCita: ProtTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, { useState, useEffect } from 'react';\nimport Form from 'components/Form';\nimport Cita from 'components/Cita';\n\nfunction App() {\n\n  //LocalStoras\n  let citasGuardadas = JSON.parse(localStorage.getItem('citas'));\n  if(!citasGuardadas){\n    citasGuardadas = [];\n  }\n\n  const [citas, agregarCitas] = useState(citasGuardadas);\n\n  useEffect(() => {\n    if(citasGuardadas){\n      localStorage.setItem('citas', JSON.stringify(citas));\n    }else{\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas, agregarCitas]);\n  \n  const nuevaCita = cita => {\n    agregarCitas([\n      ...citas,\n      cita\n    ])\n  }\n\n  //Eliminar Cita\n  const eliminarCita = id => {\n    const deleteCita = citas.filter(cita => cita.id !== id);\n    agregarCitas(deleteCita);\n  }\n\n  //Mensajes citas\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\n  return (\n    <>\n      <h1>Administrador de pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Form\n              nuevaCita={nuevaCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}